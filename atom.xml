<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习的蜗牛</title>
  
  
  <link href="https://l1yb.github.io/atom.xml" rel="self"/>
  
  <link href="https://l1yb.github.io/"/>
  <updated>2022-02-16T16:31:43.543Z</updated>
  <id>https://l1yb.github.io/</id>
  
  <author>
    <name>L1yb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NewBlog</title>
    <link href="https://l1yb.github.io/2022/02/11/NewBlog/"/>
    <id>https://l1yb.github.io/2022/02/11/NewBlog/</id>
    <published>2022-02-11T13:17:00.000Z</published>
    <updated>2022-02-16T16:31:43.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用github和Hexo搭建博客"><a href="#用github和Hexo搭建博客" class="headerlink" title="用github和Hexo搭建博客"></a>用github和Hexo搭建博客</h1><p>步骤：</p><ol><li>创建github仓库</li><li>安装nodejs和Hexo，并建站</li><li>配置</li></ol><h2 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="1. 创建github仓库"></a>1. 创建github仓库</h2><p>create a new repository<br>Rrpository name :<strong>name</strong>.github.io    (as your follow)<br>仓库类型为：Public<br><strong>先不要git clone</strong> 原因有二：</p><ol><li>git clone 之后文件文件夹以后文件夹以<code>**name**.github.io</code>命名，不符合自己命名习惯，最重要的是不是空文件夹，就算什么都没有也会产生.git隐藏文件</li><li>github的clone速度取决于网速，我的网较慢（有时候甚至不能称之为网），所以设置ssh密钥，连接本地计算机。</li></ol><h3 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h3><p>生成ssh，复制.pub内容，并邮件发送<br>cat ~&#x2F;.ssh&#x2F;id_rsa.pub<br>然后，在github（gitee、gitlab）中设置ssh即可，注意有公钥有效时间的设置。</p><h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><p>全部默认安装</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>下载仓库为淘宝镜像<br>npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a></p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><p>新建文件夹，在git bash窗口中输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><blockquote><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p></blockquote><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p><strong>网站的配置信息</strong>，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p><strong>应用程序的信息</strong>。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><strong>模版文件夹</strong>。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p><strong>资源文件夹</strong>是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><strong>主题文件夹</strong>。Hexo 会根据主题来生成静态页面。</p><p>在_config.yml</p><p>改url</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://L1yb.github.io</span> <span class="comment">#自己的网址</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>最下面</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&quot;git@github.com:L1yb/L1yb.github.io.git&quot;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&quot;website&quot;</span></span><br></pre></td></tr></table></figure><p>然后回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g     <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo d    <span class="comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><p>常用<a href="https://hexo.io/zh-cn/docs/commands" title="官方指令文档">指令</a>：</p><p>$ hexo clean<br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p><em>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</em></p><h2 id="4-其他配置"><a href="#4-其他配置" class="headerlink" title="4. 其他配置"></a>4. 其他配置</h2><p>参考<a href="https://hexo.io/zh-cn/docs/configuration">官方配置文档</a><br>网站</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站的关键词。支持多个关键词。</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai。</td></tr></tbody></table><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><hr><p>到此位置已经可以搭建完毕了，其余设置都是使博客更符合自己的偏好。</p><h2 id="5-图床"><a href="#5-图床" class="headerlink" title="5. 图床"></a>5. 图床</h2><p><strong>采用gitee方案</strong><br>用github发现有点卡，测试的时候太慢了，网络原因导致心态崩溃，所以，以学习为目的的话，不要追求一步到位用什么最好了，怎么方便学习怎么来。</p><blockquote><p>参考教程<br>LeoNG：<code>https://zhuanlan.zhihu.com/p/102594554</code></p></blockquote><h2 id="6-主题界面"><a href="#6-主题界面" class="headerlink" title="6. 主题界面"></a>6. 主题界面</h2><h3 id="1-Front-matter"><a href="#1-Front-matter" class="headerlink" title="1. Front-matter"></a>1. Front-matter</h3><p><a href="https://butterfly.js.org/posts/dc584b87/#Post-Front-matter">Front-matter官方教程</a><br>Front-matter 是 markdown 文件最上方以<code>--- </code>分隔的区域，用于指定个别档案的变数。<br>Page Front-matter 用于页面配置<br>Post Front-matter 用于文章页配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post front-matter</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h3 id="2-添加新页面"><a href="#2-添加新页面" class="headerlink" title="2. 添加新页面"></a>2. 添加新页面</h3><p><code>hexo new page tags</code></p><ol><li>前往你的 Hexo 博客的根目录</li><li>输入<code>hexo new page tags</code></li><li>你会找到<code>source/tags/index.md</code>这个文件</li><li>修改这个文件：</li></ol><p><strong>记得添加 <code>type: &quot;tags&quot;</code></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标籤</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-01-05 00:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="3-图库"><a href="#3-图库" class="headerlink" title="3. 图库"></a>3. 图库</h3><p><code>hexo n page xxx</code><br>失败！预览怎么显示啊？！</p><h3 id="4-友情链接"><a href="#4-友情链接" class="headerlink" title="4. 友情链接"></a>4. 友情链接</h3><p>创建链接<br><code>hexo new page link</code><br>添加友情链接<br>在根目录<code>source/_data</code>(没有自创) 创建<code>link.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平臺</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平臺</span></span><br></pre></td></tr></table></figure><h2 id="7、主题配置"><a href="#7、主题配置" class="headerlink" title="7、主题配置"></a>7、主题配置</h2><h3 id="1-头像"><a href="#1-头像" class="headerlink" title="1. 头像"></a>1. 头像</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> </span><br><span class="line">  <span class="string">https://gitee.com/l1yb/picgo/raw/master/cover/moonAnd.jpeg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span> <span class="comment"># 头像是否一直转</span></span><br></pre></td></tr></table></figure><p><strong>注意！！！</strong><br>图片如果直接换行会报错，要在前面加个 <code>- url</code> 不报错了，但是照片不生效，所以不要随意换行，加个空格就行了</p><h3 id="2-顶部图："><a href="#2-顶部图：" class="headerlink" title="2.  顶部图："></a>2.  顶部图：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认主页图片</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">https://gitee.com/l1yb/picgo/raw/master/cover/1003736.jpg</span></span><br></pre></td></tr></table></figure><p>文章封面：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件中</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment">#both left right </span></span><br><span class="line"><span class="attr">position:</span> <span class="string">both</span> </span><br><span class="line"><span class="attr">default cover:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">url</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">url</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">n</span></span><br></pre></td></tr></table></figure><h3 id="3-文章meta显示"><a href="#3-文章meta显示" class="headerlink" title="3. 文章meta显示"></a>3. 文章meta显示</h3><p><em>主题配置文件</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-文章版权"><a href="#4-文章版权" class="headerlink" title="4. 文章版权"></a>4. 文章版权</h3><p><em>主题配置文件</em>: <code>post_copyright</code><br>单独文章显示版权信息 设置front-matter: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright_author:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">此文章版权归xxxxx所有，如有转载，请註明来自原作者</span></span><br></pre></td></tr></table></figure><h3 id="5-侧边栏设置（部分）"><a href="#5-侧边栏设置（部分）" class="headerlink" title="5. 侧边栏设置（部分）"></a>5. 侧边栏设置（部分）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span> </span><br><span class="line"><span class="string">position:left</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用github和Hexo搭建博客&quot;&gt;&lt;a href=&quot;#用github和Hexo搭建博客&quot; class=&quot;headerlink&quot; title=&quot;用github和Hexo搭建博客&quot;&gt;&lt;/a&gt;用github和Hexo搭建博客&lt;/h1&gt;&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="Enrich" scheme="https://l1yb.github.io/categories/Enrich/"/>
    
    
    <category term="learning" scheme="https://l1yb.github.io/tags/learning/"/>
    
    <category term="hexo" scheme="https://l1yb.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>cmake基础用法</title>
    <link href="https://l1yb.github.io/2022/02/11/cmake/"/>
    <id>https://l1yb.github.io/2022/02/11/cmake/</id>
    <published>2022-02-11T13:17:00.000Z</published>
    <updated>2022-02-16T16:01:15.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(projectname [CXX] [C] [Java])</span><br></pre></td></tr></table></figure><p>用这个指令<strong>定义工程名称</strong>，并且可以指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。这个指令隐式的定义了两个cmake的变量：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;projectname&gt;_BINARY_DIR</span><br><span class="line">&lt;projectname&gt;_SOURCE_DIR</span><br></pre></td></tr></table></figure><p>这两个变量可以用（这样不用担心写错工程名称）。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_BINARY_DIR</span><br><span class="line">PROJECT_SOURCE_DIR</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</span><br></pre></td></tr></table></figure><p>这里先了解<strong>SET指令可以用来显示的定义变量</strong>即可。这里是</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(SRC_LIST main.c)</span><br></pre></td></tr></table></figure><p>如果有多个源文件，也可以定义为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(SRC_LIST main.c t1.c t2.c)</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MESSAGE</span>([SEND_ERROR | STATUS | FATAL_ERROR] <span class="string">&quot;message&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个指令是向终端输出用户定义的信息，包含三种类型：    </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SEND_ERROR<span class="comment">#产生错误，生成过程被跳过。</span></span><br><span class="line">STATUS<span class="comment">#输出前缀为--d的信息。</span></span><br><span class="line">FATAL_ERROR<span class="comment">#立即终止所有的cmake过程。</span></span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p><strong>ADD_EXECUTABLE定义了一个为hello的可执行文件</strong>，相关的源文件是SRC_LIST中定义的源文件列表。</p><p>本例可以简化为如下CMakeList.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(HELLO)</span><br><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello main.c)</span><br></pre></td></tr></table></figure><h2 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h2><p>使用**${}**方式来取得变量中的值，而在IF语句中则直接使用变量名。</p><blockquote><p>指令（参数1 参数2 …） </p></blockquote><p>参数之间使用空格或者分号分隔开。例如加入一个函数fun.c</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD_EXETABLE(hello main.c;fun.c)</span><br></pre></td></tr></table></figure><p><em>指令是大小写无关的，参数和变量是大小写相关的</em>。但是推荐你全部使用大写指令。<br>可以使用双引号“”将源文件包含起来。处理特别难处理的名字比如<code>fun c.c</code>，则使用<code>SET(SRC_LIST &quot;fun c.c&quot;)</code>可以防止报错。</p><h2 id="清理工程"><a href="#清理工程" class="headerlink" title="清理工程"></a>清理工程</h2><p>可以使用<code>make clean</code>清理makefile产生的中间的文件，但是，不能使用<code>make distclean</code>清除<code>cmake</code>产生的中间件。如果需要删除cmake的中间件，可以采用<code>rm -rf ***</code>  来删除中间件。</p><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><p>本小节的任务：</p><ol><li>为工程添加一个子目录<code>src</code>，用来放置工程源代码</li><li>添加一个子目录<code>doc</code>，用来放置工程源代码</li><li>在工程目录添加文本文件<code>COPYRIGHT</code>，<code>README</code></li><li>在工程目录添加一个<code>runhello.sh</code>脚本，用来调用hello二进制</li><li>将构建后的目标文件放入构建目录的bin子目录；</li><li>最终安装这些文件：将hello二进制与<code>runhello.sh</code>安装到<code>/usr/bin</code>，将doc目录的内容以及<code>COPYRIGHT/README</code>安装到<code>/usr/share/doc/cmake/t2</code>。</li></ol><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>创建t2文件夹，并添加<code>CMakeLists.txt</code>。</p><h3 id="2、添加子目录"><a href="#2、添加子目录" class="headerlink" title="2、添加子目录"></a>2、添加子目录</h3><p>创建src文件夹，并添加<code>CMakeLists.txt</code>、<code>main.cpp</code></p><p>顶层CMakeLists：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src bin)</span><br></pre></td></tr></table></figure><p>src下CMakeLists:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(hello main.cpp)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build/</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><blockquote><p>use<code>rm -rf *</code> 清空build文件夹内    </p></blockquote><p>构建成功后会在build&#x2F;bin中发现目标文件hello。</p><p>语法解释：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL] )</span><br></pre></td></tr></table></figure><blockquote><p>这个指令用于<strong>向当前工程添加存放源文件的子目录。并可以指定中间二进制和目标二进制存放的位置</strong>。EXCLUDE_FROM_ALL参数的含义是将这个目录从编译过程中排除，比如，工程中的example，可能就需要工程构建完成后，再进入example目录单独进行构建（当然，你可以通过定义依赖来解决此类问题）。</p></blockquote><p>上面的例子定义了将src子目录加入工程，并指定编译输出（包含编译中间结果）路径为bin目录。如果不进行bin目录的指定，那么编译结果（包括中间结果）都将存放在build&#x2F;src目录（这个目录跟原来的src目录对应），指定bin目录后，相当于在编译时将src重命名为bin，所有的中间结果和目标二进制都贱存放在bin目录中。</p><p>如果在上面的例子中将<code>ADD_SUBDIRECTORY(src bin)</code>改成<code>SUBDIRS(src)</code>。那么在build目录中将出现一个src目录，生成的目标代码hello将存在在src目录中。</p><p>这里提一下，SUBDIRS指令，使用的方法是：<code>SUBDIRS(dir1 dir2 …)</code>,但是这个指令已经不推荐使用了。他可以一次添加多个子目录，并且，即是外部编译，子目录体系仍然会被保存。</p><h3 id="3、换个位置保存二进制文件"><a href="#3、换个位置保存二进制文件" class="headerlink" title="3、换个位置保存二进制文件"></a>3、换个位置保存二进制文件</h3><p>不管是<code>SUBDIRS</code>还是<code>ADD_SUBDIRECTORY</code>指令（不论是否指定编译输出目录），我们都可以通过SET指令<strong>重新定义</strong><code>EXECUTABLE_OUTPUT_PATH</code>和<code>LIBRARY_OUTPUT_PATH</code>变量来指定最终的目标二进制的位置（指最终生成的hello或者最终的共享库，不包括编译生成的中间文件）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">SET</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/lib)</span><br></pre></td></tr></table></figure><p>如果是外部编译，指的是外部编译所在目录，也就是本例中的build目录。<br>那么有这么多的CMakeLists.txt，应该把以上的两条指令写在哪？一个简单原则，在哪里<code>ADD_EXECUTABLE</code>或者<code>ADD_LIBRARY</code>，如果需要改变目标存放路径，就在哪里加上上述的定义。在这个例子中，则是src下的CMakeLists.txt。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CMake&quot;&gt;&lt;a href=&quot;#CMake&quot; class=&quot;headerlink&quot; title=&quot;CMake&quot;&gt;&lt;/a&gt;CMake&lt;/h1&gt;&lt;h2 id=&quot;CMakeLists-txt&quot;&gt;&lt;a href=&quot;#CMakeLists-txt&quot; class=&quot;head</summary>
      
    
    
    
    <category term="cmake" scheme="https://l1yb.github.io/categories/cmake/"/>
    
    
    <category term="learning" scheme="https://l1yb.github.io/tags/learning/"/>
    
    <category term="cmake" scheme="https://l1yb.github.io/tags/cmake/"/>
    
    <category term="c++" scheme="https://l1yb.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>VSCode</title>
    <link href="https://l1yb.github.io/2022/02/11/vscode/"/>
    <id>https://l1yb.github.io/2022/02/11/vscode/</id>
    <published>2022-02-11T13:17:00.000Z</published>
    <updated>2022-02-16T16:09:21.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><blockquote><p>首先要剔除依赖vs的毛病，不应以 将vscode编程vs的思想去使用<br>vs的一键编译在vscode中实现起来需要做许多功课    </p></blockquote><h2 id="vscode-build"><a href="#vscode-build" class="headerlink" title="vscode build"></a>vscode build</h2><h2 id="单文件编程"><a href="#单文件编程" class="headerlink" title="单文件编程"></a>单文件编程</h2><p>方法一：直接卸载插件++ complie run 即可实现单文件</p><p>方法二：code runner </p><p>方法三：配置launch.json、tasks.json</p><p>注意文件路径正确、项目名称一致</p><p>there genetate default launch.json and task.json<br><em>in launch.json</em>   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;progrom&quot;: &quot;here is a executable file&quot; //generated by cmake ,designated by cmakelists.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>in task.json</em><br>Just like a shell to build     </p><h2 id="多文件编程"><a href="#多文件编程" class="headerlink" title="多文件编程"></a>多文件编程</h2><p><em><strong>多文件不建议配置</strong></em><br>need to learn  <strong>cmakelists.txt</strong>     </p><p>there had cmakelists.txt,then   </p><p>open terminal ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build </span><br><span class="line"><span class="built_in">cd</span> .\build\</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>too easy.  if you can write cmakelists</p><h2 id="SSH连接虚拟机"><a href="#SSH连接虚拟机" class="headerlink" title="SSH连接虚拟机"></a>SSH连接虚拟机</h2><h3 id="1-安装remote-ssh插件"><a href="#1-安装remote-ssh插件" class="headerlink" title="1. 安装remote-ssh插件"></a>1. 安装remote-ssh插件</h3><h3 id="2-虚拟机中获取ip"><a href="#2-虚拟机中获取ip" class="headerlink" title="2. 虚拟机中获取ip"></a>2. 虚拟机中获取ip</h3><ol><li><p>虚拟机中<code>ifconfig</code></p></li><li><p>在win中vscode设置中remot-ssh 配置<code>.ssh/config</code></p></li><li><p>需要写虚拟机host、ip、用户名</p><p><code>user@ip</code></p></li></ol><h3 id="3-固定虚拟机ip"><a href="#3-固定虚拟机ip" class="headerlink" title="3. 固定虚拟机ip"></a>3. 固定虚拟机ip</h3><ol><li><p><strong>使用root权限</strong></p></li><li><p>gedit &#x2F;etc&#x2F;network&#x2F;interfaces（readonly文件）</p></li><li><pre><code>　auto @@　　　　iface @@ inet static　　　　address @@　　　　netmask @@　　　　gateway @@　　　　iface @@ inet6 auto</code></pre></li><li><p><code>nmcli dev show</code> 查看上述需要信息</p></li></ol><h2 id="some-common-operations"><a href="#some-common-operations" class="headerlink" title="some common operations"></a>some common operations</h2><p>1.shift between en and zh_ch<br>    shift + ctrl +p<br>    configure display language<br>2.choose theme<br>    ctrl + k ctrl +t    </p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vscode&quot;&gt;&lt;a href=&quot;#vscode&quot; class=&quot;headerlink&quot; title=&quot;vscode&quot;&gt;&lt;/a&gt;vscode&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先要剔除依赖vs的毛病，不应以 将vscode编程vs的思想去使用&lt;br&gt;vs的</summary>
      
    
    
    
    <category term="c++" scheme="https://l1yb.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://l1yb.github.io/tags/c/"/>
    
    <category term="vscode" scheme="https://l1yb.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>move</title>
    <link href="https://l1yb.github.io/2022/02/10/move/"/>
    <id>https://l1yb.github.io/2022/02/10/move/</id>
    <published>2022-02-10T14:46:25.000Z</published>
    <updated>2022-02-16T14:26:22.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bhv-base-move"><a href="#bhv-base-move" class="headerlink" title="bhv_base_move"></a>bhv_base_move</h1><p> <code>bool Bhv_BasicMove::execute(PlayerAgent *agent)</code><br>block interpretion   </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dlog.<span class="built_in">addText</span>(Logger::TEAM, __FILE__ <span class="string">&quot;: Bhv_BasicMove&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> WorldModel &amp;wm = agent-&gt;<span class="built_in">world</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// tackle</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Bhv_BasicTackle</span>(<span class="number">0.8</span>, <span class="number">80.0</span>).<span class="built_in">execute</span>(agent) &amp;&amp;</span><br><span class="line">      !wm.<span class="built_in">existKickableTeammate</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vector2D ball = wm.<span class="built_in">ball</span>().<span class="built_in">pos</span>(); <span class="comment">//</span></span><br><span class="line">  Vector2D me = wm.<span class="built_in">self</span>().<span class="built_in">pos</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> Vector2D target_point = Strategy::<span class="built_in">i</span>().<span class="built_in">getPosition</span>(wm.<span class="built_in">self</span>().<span class="built_in">unum</span>());</span><br><span class="line"></span><br><span class="line">  Vector2D homePos = target_point;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> num = wm.<span class="built_in">self</span>().<span class="built_in">unum</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>question :what’s <code> const Vector2D target_point = Strategy::i().getPosition(wm.self().unum());</code> mean  ? </p><p>The meaning is that:</p><p>strategy get the agent’s unum ,generating a <code>target_position</code>,different from <code>me</code>.</p><p><code>me </code> is current position,but <code>target_position</code> is the target calculated according to <code>strategy</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//对不同位置的球员的Intercept动作分情况判定</span><br><span class="line"> &#123;</span><br><span class="line">   if (num &gt; 5 &amp;&amp; !wm.existKickableTeammate() &amp;&amp;</span><br><span class="line">       (self_min &lt;= 3 ||</span><br><span class="line">        (self_min &lt; mate_min + 3 &amp;&amp; self_min &lt; opp_min + 4))) &#123;</span><br><span class="line">     Body_Intercept().execute(agent);</span><br><span class="line">     agent-&gt;setNeckAction(new Neck_OffensiveInterceptNeck());</span><br><span class="line">     return true;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>if there are<br>agent whose unum greater than other teammates and no other kickable teammates and<br>(the min cycle times of the agent to get target are below 3 or<br>    (Within three cycles after the arrival of teammates the agent can get there    and<br>    within four cycles after the arrival of opponents<br>    )<br>)<br>execute interception</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现两个中后卫在危险位置对球的拦截</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> goalCycles = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">1</span>; z &lt; <span class="number">15</span>; ++z)</span><br><span class="line">      <span class="keyword">if</span> (wm.<span class="built_in">ball</span>().<span class="built_in">inertiaPoint</span>(z).x &lt; <span class="number">-52.5</span> &amp;&amp;</span><br><span class="line">          wm.<span class="built_in">ball</span>().<span class="built_in">inertiaPoint</span>(z).<span class="built_in">absY</span>() &lt; <span class="number">8.0</span>) &#123;</span><br><span class="line">        goalCycles = z;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((wm.<span class="built_in">self</span>().<span class="built_in">unum</span>() == <span class="number">2</span> || wm.<span class="built_in">self</span>().<span class="built_in">unum</span>() == <span class="number">3</span>) &amp;&amp; goalCycles != <span class="number">100</span> &amp;&amp;</span><br><span class="line">        mate_min &gt;= goalCycles &amp;&amp; me.x &lt; <span class="number">-45.0</span> &amp;&amp; !wm.<span class="built_in">existKickableTeammate</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (wm.<span class="built_in">ball</span>().<span class="built_in">inertiaPoint</span>(self_min).x &gt; <span class="number">-52.0</span>)</span><br><span class="line">        <span class="built_in">Body_Intercept</span>().<span class="built_in">execute</span>(agent);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">Body_GoToPoint</span>(wm.<span class="built_in">ball</span>().<span class="built_in">inertiaPoint</span>(goalCycles - <span class="number">1</span>), <span class="number">0.5</span>,</span><br><span class="line">                       ServerParam::<span class="built_in">i</span>().<span class="built_in">maxDashPower</span>())</span><br><span class="line">            .<span class="built_in">execute</span>(agent);</span><br><span class="line"></span><br><span class="line">      agent-&gt;<span class="built_in">setNeckAction</span>(<span class="keyword">new</span> <span class="built_in">Neck_OffensiveInterceptNeck</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (me.x &lt; <span class="number">-37.0</span> &amp;&amp; opp_min &lt; mate_min &amp;&amp; opp_min &gt; <span class="number">2</span> &amp;&amp;</span><br><span class="line">        homePos.x &gt; <span class="number">-37.0</span> &amp;&amp; wm.<span class="built_in">ourDefenseLineX</span>() &gt; me.x - <span class="number">2.5</span>) &#123;</span><br><span class="line">      <span class="built_in">Body_GoToPoint</span>(rcsc::<span class="built_in">Vector2D</span>(me.x + <span class="number">15.0</span>, me.y), <span class="number">0.5</span>,</span><br><span class="line">                     ServerParam::<span class="built_in">i</span>().<span class="built_in">maxDashPower</span>(),</span><br><span class="line">                     ServerParam::<span class="built_in">i</span>().<span class="built_in">maxDashPower</span>(), <span class="number">2</span>, <span class="literal">true</span>, <span class="number">5.0</span>)</span><br><span class="line">          .<span class="built_in">execute</span>(agent);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (wm.<span class="built_in">existKickableOpponent</span>() &amp;&amp; wm.<span class="built_in">ball</span>().<span class="built_in">distFromSelf</span>() &lt; <span class="number">12.0</span>)</span><br><span class="line">        agent-&gt;<span class="built_in">setNeckAction</span>(<span class="keyword">new</span> <span class="built_in">Neck_TurnToBall</span>());</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        agent-&gt;<span class="built_in">setNeckAction</span>(<span class="keyword">new</span> <span class="built_in">Neck_TurnToBallOrScan</span>());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>question: in the begin of code block ,what’s <code>int z</code>?<br>then we can check the definition of <code>inertiaPoint</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vector2D <span class="title">inertiaPoint</span><span class="params">( <span class="type">const</span> <span class="type">int</span> cycle )</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">inertia_n_step_point</span>( <span class="built_in">pos</span>(),</span><br><span class="line">                                   <span class="built_in">vel</span>(),</span><br><span class="line">                                   cycle,</span><br><span class="line">                                   ServerParam::<span class="built_in">i</span>().<span class="built_in">ballDecay</span>() );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>inertiaPoint</code>:estimate future point after n steps only by <a href="%22%E6%83%AF%E6%80%A7%22">inertia</a>“)(仅通过惯性估计n步后的未来点<br>)<br>so this function is to* estimate whether the ball will enter a dangerous area ,if wil,how much cycles.  *</p><p>next , judge whether to execute interception.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defence Half的移动策略。不参与前场进攻</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">6</span> &amp;&amp; wm.<span class="built_in">self</span>().<span class="built_in">stamina</span>() &gt; <span class="number">3500.0</span> &amp;&amp; ball.x &gt; <span class="number">33.0</span>) &#123;</span><br><span class="line">      Vector2D opp = wm.<span class="built_in">opponentsFromSelf</span>().<span class="built_in">front</span>()-&gt;<span class="built_in">pos</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">float</span> oDist = wm.<span class="built_in">opponentsFromSelf</span>().<span class="built_in">front</span>()-&gt;<span class="built_in">pos</span>().<span class="built_in">dist</span>(homePos);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (oDist &lt; <span class="number">8.0</span> &amp;&amp; opp.x &gt; homePos.x)</span><br><span class="line">        homePos = opp + Vector2D::<span class="built_in">polar2vector</span>(<span class="number">2.5</span>, (ball - opp).<span class="built_in">th</span>());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (homePos.x &gt; <span class="number">22.0</span>) homePos.x = <span class="number">22.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (wm.<span class="built_in">self</span>().<span class="built_in">unum</span>() == <span class="number">6</span> &amp;&amp; ball.x &lt; <span class="number">10.0</span> &amp;&amp; ball.<span class="built_in">absY</span>() &gt; <span class="number">12.0</span> &amp;&amp;</span><br><span class="line">        opp_min &lt; mate_min &amp;&amp; ball.x &gt; <span class="number">-36.0</span>) &#123;</span><br><span class="line">      Vector2D opp = wm.<span class="built_in">opponentsFromSelf</span>().<span class="built_in">front</span>()-&gt;<span class="built_in">pos</span>();</span><br><span class="line">      <span class="type">float</span> oDist = wm.<span class="built_in">opponentsFromSelf</span>().<span class="built_in">front</span>()-&gt;<span class="built_in">pos</span>().<span class="built_in">dist</span>(homePos);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (oDist &lt; <span class="number">8.0</span>) &#123;</span><br><span class="line">        homePos = opp + Vector2D::<span class="built_in">polar2vector</span>(<span class="number">1.0</span>, (ball - opp).<span class="built_in">th</span>());</span><br><span class="line">        homePos.x -= <span class="number">1.0</span>;</span><br><span class="line">        isSoftMarking = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vector2D tempHomePos = homePos;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>critical code</strong>: <code>wm.opponentsFromSelf().front()-&gt;pos()</code><br><strong>explain</strong>:get opponents sorted by distance from self ,and then get the first opp’s pos</p><p><a href="%22%22"></a><br><a href="%22%E7%9F%A2%E9%87%8F%22">vector</a><br><a href="%22%E5%88%86%E7%B1%BB%22">sort</a><br><a href="%22%E6%8B%A6%E6%88%AA%22">intercept</a><br><a href="%22%E6%83%AF%E6%80%A7%22">inertia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bhv-base-move&quot;&gt;&lt;a href=&quot;#bhv-base-move&quot; class=&quot;headerlink&quot; title=&quot;bhv_base_move&quot;&gt;&lt;/a&gt;bhv_base_move&lt;/h1&gt;&lt;p&gt; &lt;code&gt;bool Bhv_BasicMove:</summary>
      
    
    
    
    <category term="c++" scheme="https://l1yb.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://l1yb.github.io/tags/c/"/>
    
    <category term="robocup" scheme="https://l1yb.github.io/tags/robocup/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://l1yb.github.io/2022/02/10/hello-world/"/>
    <id>https://l1yb.github.io/2022/02/10/hello-world/</id>
    <published>2022-02-10T13:52:48.413Z</published>
    <updated>2022-02-16T13:51:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Enrich" scheme="https://l1yb.github.io/categories/Enrich/"/>
    
    
    <category term="learning" scheme="https://l1yb.github.io/tags/learning/"/>
    
    <category term="hexo" scheme="https://l1yb.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
